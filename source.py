import os
import subprocess
import zipfile
from colorama import Fore

def create_incremental_dir(base_dir, base_name):
    counter = 1
    while True:
        dir_name = f"{base_name}-{counter:02d}"
        full_path = os.path.join(base_dir, dir_name)
        if not os.path.exists(full_path):
            os.makedirs(full_path)
            return full_path
        counter += 1

def decompress_jar(jar_path, output_dir):
    with zipfile.ZipFile(jar_path, 'r') as jar_file:
        jar_file.extractall(output_dir)

def search_and_modify_files(directory):
    """Ищет ключевые слова в файлах внутри директории и модифицирует их."""
    keyword_comments = {
        "webhook": "// Предположительно взаимодействие с Discord вебхуком!\n",
        "clientchatevent": "// Ивент, для прослушки отправленных вам сообщений. Может использоваться для отправки ваших данных из чата\n",
        "runasync": "// Вызов асинхронной функции, используется для разных целей, в том числе и отправка вебхуков Discord\n",
        "tts": "// Используется в коде, для отправки вебхука\n",
        "embedobject": "// Используется в коде, для отправки вебхука\n",
        "setcontent": "// Используется в коде, для отправки вебхука\n",
        "thumbnail": "// Используется в коде, для отправки вебхука\n",
        "openconnection": "// Открытие соединение с сервером, может быть использовано для разных целей, но в том числе и для скачивания файлов\n",
        "stealer": "// Название вирусного ПО для кражи ваших данных\n",
        "socket": "// Подключение к сокету, может использоваться для выполнения команд на вашем компьютере\n",
        "runtime.getruntime().exec": "// Выполнение команды в cmd/powershell, ОЧЕНЬ ОПАСНО! Может использоваться для добавления в исключенния Windows Defender\n",
        "powershell": "// Возможное выполнение команды в cmd/powershell, ОЧЕНЬ ОПАСНО! Может использоваться для добавления в исключенния Windows Defender\n",
        "couldn't be decompiled": "Возможно очень сильная обфускация, если это не доверенный мод, то не используйте!\n",
        "download": "Возможно скачивание чего-либо!\n",
    }

    for root, dirs, files in os.walk(directory):
        for dir_name in dirs:
            if "cmdcoders" in dir_name:
                print(Fore.RED + "Обнаружена студия 'cmdcoders', пишут логгеры и лоадеры на заказ, прошу обратить особое внимание")

        for file in files:
            if file.endswith(".java"):
                file_path = os.path.join(root, file)
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                modified = False
                new_lines = []
                for line in lines:
                    lower_line = line.lower()
                    for keyword, comment in keyword_comments.items():
                        if keyword in lower_line:
                            new_lines.append(comment)
                            modified = True
                            print(Fore.RED + f"Keyword '{keyword}' found in file: {file_path}" + Fore.RESET)
                    new_lines.append(line)
                
                if modified:
                    file_name, file_ext = os.path.splitext(file)
                    new_file_name = f"{file_name}-detected{file_ext}"
                    new_file_path = os.path.join(root, new_file_name)
                    with open(new_file_path, 'w', encoding='utf-8') as f:
                        f.writelines(new_lines)
                    os.remove(file_path)

fernflower_path = "fernflower.jar"

jar_path = "input.jar"

base_output_dir = "temp"

decompiled_dir = create_incremental_dir(base_output_dir, "decompiled")

command = "java", "-jar", fernflower_path, "-dgs=1", jar_path, decompiled_dir

subprocess.run(command, check=True)

work_dir = os.path.join(decompiled_dir, "work")
os.makedirs(work_dir)

decompiled_jar_path = os.path.join(decompiled_dir, os.path.basename(jar_path))

decompress_jar(decompiled_jar_path, work_dir)

search_and_modify_files(work_dir)

print(Fore.GREEN + "Сканирование завершено!")
input()